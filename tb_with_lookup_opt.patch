From ad89f486be39a676f112059068c31578ceeaa081 Mon Sep 17 00:00:00 2001
From: Xue Zhiyou <xzy@localhost.localdomain>
Date: Mon, 19 Dec 2016 16:16:59 +0800
Subject: [PATCH 5/7] tb-lookup-opt: xp, Linux boot OK, 5% performance up

---
 1.sh                      |    5 +++--
 configure                 |    8 ++++++++
 cpu-exec.c                |   13 +++++++++++++
 include/exec/exec-all.h   |   20 ++++++++++++++++++++
 target-i386/translate.c   |   42 +++++++++++++++++++++++++++++++++++++++++-
 tcg/mips/tcg-target.inc.c |   40 ++++++++++++++++++++++++++++++++++++++++
 tcg/tcg-op.h              |    7 +++++++
 tcg/tcg-opc.h             |    3 +++
 tcg/tcg.h                 |   19 +++++++++++++++++++
 translate-all.c           |   14 ++++++++++++++
 10 files changed, 168 insertions(+), 3 deletions(-)

diff --git a/1.sh b/1.sh
index cc3fd11..c01a878 100755
--- a/1.sh
+++ b/1.sh
@@ -7,5 +7,6 @@
     --disable-spice \
     --enable-attr \
     --disable-stack-protector \
-    --enable-o3-opt
-    #--enable-tcg-interpreter \
+    --enable-o3-opt \
+    --enable-tb-lookup-opt \
+    #--enable-tcg-interpreter
diff --git a/configure b/configure
index b1e10af..87790b0 100755
--- a/configure
+++ b/configure
@@ -183,6 +183,7 @@ cc_i386=i386-pc-linux-gnu-gcc
 libs_qga=""
 debug_info="yes"
 stack_protector=""
+tb_lookup_opt="no" #liaoyin
 
 # Don't accept a target_list environment variable.
 unset target_list
@@ -1155,6 +1156,8 @@ for opt do
   ;;
   --enable-o3-opt) o3_opt="yes" #jin
   ;;
+  --enable-tb-lookup-opt) tb_lookup_opt="yes" #liaoyin
+  ;;
   *)
       echo "ERROR: unknown option $opt"
       echo "Try '$0 --help' for more information"
@@ -4919,6 +4922,7 @@ echo "NUMA host support $numa"
 echo "tcmalloc support  $tcmalloc"
 echo "jemalloc support  $jemalloc"
 echo "avx2 optimization $avx2_opt"
+echo "* TB Lookup optimization $tb_lookup_opt" #liaoyin
 echo "* O3              $o3_opt" #jin
 
 if test "$sdl_too_old" = "yes"; then
@@ -5490,6 +5494,10 @@ if test "$have_rtnetlink" = "yes" ; then
   echo "CONFIG_RTNETLINK=y" >> $config_host_mak
 fi
 
+if test $tb_lookup_opt = "yes" ; then
+  echo "CONFIG_TB_LOOKUP_OPT=y" >> $config_host_mak
+fi
+
 # Hold two types of flag:
 #   CONFIG_THREAD_SETNAME_BYTHREAD  - we've got a way of setting the name on
 #                                     a thread we have a handle to
diff --git a/cpu-exec.c b/cpu-exec.c
index 5d9710a..bad819b 100644
--- a/cpu-exec.c
+++ b/cpu-exec.c
@@ -169,6 +169,11 @@ static inline tcg_target_ulong cpu_tb_exec(CPUState *cpu, TranslationBlock *itb)
     tb_exit = ret & TB_EXIT_MASK;
     trace_exec_tb_exit(last_tb, tb_exit);
 
+#ifdef CONFIG_TB_LOOKUP_OPT
+    if (tb_exit == TB_EXIT_TB_LOOPKUP_OPT) { // 3 means the TB is returned from exit_tb 
+        return ret;
+    }
+#endif
     if (tb_exit > TB_EXIT_IDX1) {
         /* We didn't start executing this TB (eg because the instruction
          * counter hit zero); we must restore the guest PC to the address
@@ -356,7 +361,15 @@ static inline TranslationBlock *tb_find_fast(CPUState *cpu,
 #endif
     /* See if we can patch the calling TB. */
     if (*last_tb && !qemu_loglevel_mask(CPU_LOG_TB_NOCHAIN)) {
+#ifdef CONFIG_TB_LOOKUP_OPT
+        if (tb_exit == TB_EXIT_TB_LOOPKUP_OPT) {
+            (*last_tb)->tb_lookup_cache[tb_lookup_hash(tb->pc)] = tb;
+        } else {
+            tb_add_jump(*last_tb, tb_exit, tb);
+        }
+#else
         tb_add_jump(*last_tb, tb_exit, tb);
+#endif
     }
     tb_unlock();
     return tb;
diff --git a/include/exec/exec-all.h b/include/exec/exec-all.h
index d008296..17db1ad 100644
--- a/include/exec/exec-all.h
+++ b/include/exec/exec-all.h
@@ -211,6 +211,23 @@ static inline void tlb_flush_by_mmuidx(CPUState *cpu, ...)
 #define USE_DIRECT_JUMP
 #endif
 
+#ifdef CONFIG_TB_LOOKUP_OPT
+
+#define TB_LOOKUP_CACHE_BITS    3
+#define TB_LOOKUP_CACHE_MASK    ((1 << TB_LOOKUP_CACHE_BITS) - 1)
+#define TB_LOOKUP_CACHE_SIZE    (1 << TB_LOOKUP_CACHE_BITS)
+
+/* Use pc[4:2] as hash key */
+static inline int tb_lookup_hash(target_ulong pc)
+{
+  #ifdef _LP64
+    return (pc >> 3) & TB_LOOKUP_CACHE_MASK;
+  #else
+    return (pc >> 2) & TB_LOOKUP_CACHE_MASK;
+  #endif
+}
+#endif
+
 struct TranslationBlock {
     target_ulong pc;   /* simulated PC corresponding to this block (EIP + CS base) */
     target_ulong cs_base; /* CS base for this block */
@@ -262,6 +279,9 @@ struct TranslationBlock {
      */
     uintptr_t jmp_list_next[2];
     uintptr_t jmp_list_first;
+#ifdef CONFIG_TB_LOOKUP_OPT
+    struct TranslationBlock * tb_lookup_cache[TB_LOOKUP_CACHE_SIZE];
+#endif
 };
 
 void tb_free(TranslationBlock *tb);
diff --git a/target-i386/translate.c b/target-i386/translate.c
index fa2ac48..15be9c6 100644
--- a/target-i386/translate.c
+++ b/target-i386/translate.c
@@ -141,6 +141,9 @@ typedef struct DisasContext {
 } DisasContext;
 
 static void gen_eob(DisasContext *s);
+#ifdef CONFIG_TB_LOOKUP_OPT
+static void gen_eob_with_tb_lookup(DisasContext *s);
+#endif
 static void gen_jmp(DisasContext *s, target_ulong eip);
 static void gen_jmp_tb(DisasContext *s, target_ulong eip, int tb_num);
 static void gen_op(DisasContext *s1, int op, TCGMemOp ot, int d);
@@ -2488,6 +2491,26 @@ static void gen_eob(DisasContext *s)
     gen_eob_inhibit_irq(s, false);
 }
 
+#ifdef CONFIG_TB_LOOKUP_OPT
+/* Reconstruct from gen_eob() */
+static void gen_eob_with_tb_lookup(DisasContext *s)
+{
+    gen_update_cc_op(s);
+    gen_reset_hflag(s,HF_INHIBIT_IRQ_MASK);
+    if (s->tb->flags & HF_RF_MASK) {
+        gen_helper_reset_rf(cpu_env);
+    }
+    if (s->singlestep_enabled) {
+        gen_helper_debug(cpu_env);
+    } else if (s->tf) {
+        gen_helper_single_step(cpu_env);
+    } else {
+        tcg_gen_exit_tb_with_tb_lookup((long)(s->tb));
+    }
+    s->is_jmp = DISAS_TB_JUMP;
+}
+#endif
+
 /* generate a jump to eip. No segment change must happen before as a
    direct call to the next block may occur */
 static void gen_jmp_tb(DisasContext *s, target_ulong eip, int tb_num)
@@ -4867,7 +4890,12 @@ static target_ulong disas_insn(CPUX86State *env, DisasContext *s,
             gen_push_v(s, cpu_T1);
             gen_op_jmp_v(cpu_T0);
             gen_bnd_jmp(s);
+
+#ifdef CONFIG_TB_LOOKUP_OPT
+            gen_eob_with_tb_lookup(s);
+#else
             gen_eob(s);
+#endif
             break;
         case 3: /* lcall Ev */
             gen_op_ld_v(s, ot, cpu_T1, cpu_A0);
@@ -4893,7 +4921,11 @@ static target_ulong disas_insn(CPUX86State *env, DisasContext *s,
             }
             gen_op_jmp_v(cpu_T0);
             gen_bnd_jmp(s);
+#ifdef CONFIG_TB_LOOKUP_OPT
+            gen_eob_with_tb_lookup(s);
+#else
             gen_eob(s);
+#endif
             break;
         case 5: /* ljmp Ev */
             gen_op_ld_v(s, ot, cpu_T1, cpu_A0);
@@ -6273,7 +6305,11 @@ static target_ulong disas_insn(CPUX86State *env, DisasContext *s,
         /* Note that gen_pop_T0 uses a zero-extending load.  */
         gen_op_jmp_v(cpu_T0);
         gen_bnd_jmp(s);
-        gen_eob(s);
+#ifdef CONFIG_TB_LOOKUP_OPT
+        gen_eob_with_tb_lookup(s);
+#else
+	gen_eob(s);
+#endif
         break;
     case 0xc3: /* ret */
         ot = gen_pop_T0(s);
@@ -6281,7 +6317,11 @@ static target_ulong disas_insn(CPUX86State *env, DisasContext *s,
         /* Note that gen_pop_T0 uses a zero-extending load.  */
         gen_op_jmp_v(cpu_T0);
         gen_bnd_jmp(s);
+#ifdef CONFIG_TB_LOOKUP_OPT
+        gen_eob_with_tb_lookup(s);
+#else
         gen_eob(s);
+#endif
         break;
     case 0xca: /* lret im */
         val = cpu_ldsw_code(env, s->pc);
diff --git a/tcg/mips/tcg-target.inc.c b/tcg/mips/tcg-target.inc.c
index e934154..76ca31b 100644
--- a/tcg/mips/tcg-target.inc.c
+++ b/tcg/mips/tcg-target.inc.c
@@ -1531,6 +1531,46 @@ static inline void tcg_out_op(TCGContext *s, TCGOpcode opc,
     c2 = const_args[2];
 
     switch (opc) {
+#ifdef CONFIG_TB_LOOKUP_OPT
+    void *label1_ptr, *label2_ptr;
+    case INDEX_op_exit_tb_with_tb_lookup:
+        tcg_out_movi(s, TCG_TYPE_PTR, TCG_REG_AT, (tcg_target_long)(s->tb_lookup_cache));
+#if TARGET_LONG_BITS == 32
+        tcg_out_ld(s, TCG_TYPE_I32, TCG_REG_A0, TCG_REG_S0, offsetof(CPUArchState, eip));
+#else
+        tcg_out_ld(s, TCG_TYPE_I64, TCG_REG_A0, TCG_REG_S0, offsetof(CPUArchState, eip));
+#endif
+    #ifdef _LP64
+        tcg_out_opc_imm(s, OPC_ANDI, TCG_TMP1, TCG_REG_A0, (TB_LOOKUP_CACHE_SIZE - 1) << 3);  // pc[4:2] is hash key 
+        tcg_out_opc_reg(s, OPC_DADDU, TCG_REG_AT, TCG_REG_AT, TCG_TMP1);
+    #else
+        tcg_out_opc_imm(s, OPC_ANDI, TCG_TMP1, TCG_REG_A0, (TB_LOOKUP_CACHE_SIZE - 1) << 2);  // pc[4:2] is hash key 
+        tcg_out_opc_reg(s, OPC_ADDU, TCG_REG_AT, TCG_REG_AT, TCG_TMP1);
+    #endif
+        tcg_out_ld(s, TCG_TYPE_PTR, TCG_REG_AT, TCG_REG_AT, 0);
+
+        label1_ptr = s->code_ptr;
+        tcg_out_opc_br(s, OPC_BEQ, TCG_REG_AT,TCG_REG_ZERO);
+        tcg_out_nop(s);
+
+#if TARGET_LONG_BITS == 32
+        tcg_out_ld(s, TCG_TYPE_I32, TCG_TMP1, TCG_REG_AT, offsetof(TranslationBlock, pc));
+#else
+        tcg_out_ld(s, TCG_TYPE_I64, TCG_TMP1, TCG_REG_AT, offsetof(TranslationBlock, pc));
+#endif
+        label2_ptr = s->code_ptr;
+        tcg_out_opc_br(s, OPC_BNE, TCG_REG_A0, TCG_TMP1);
+        tcg_out_nop(s);
+
+        tcg_out_ld(s, TCG_TYPE_PTR, TCG_TMP1, TCG_REG_AT, offsetof(TranslationBlock, tc_ptr));
+        tcg_out_opc_reg(s, OPC_JR, 0, TCG_TMP1, 0);
+        tcg_out_nop(s);
+
+        reloc_pc16(label1_ptr, s->code_ptr);
+        reloc_pc16(label2_ptr, s->code_ptr);
+	a0 |= TB_EXIT_TB_LOOPKUP_OPT;
+        /* FALLTHRU */
+#endif
     case INDEX_op_exit_tb:
         {
             TCGReg b0 = TCG_REG_ZERO;
diff --git a/tcg/tcg-op.h b/tcg/tcg-op.h
index f217e80..3aa59aa 100644
--- a/tcg/tcg-op.h
+++ b/tcg/tcg-op.h
@@ -753,6 +753,13 @@ static inline void tcg_gen_exit_tb(uintptr_t val)
     tcg_gen_op1i(INDEX_op_exit_tb, val);
 }
 
+#ifdef CONFIG_TB_LOOKUP_OPT     /* Liao Yin */
+static inline void tcg_gen_exit_tb_with_tb_lookup(tcg_target_long val)
+{
+    tcg_gen_op1i(INDEX_op_exit_tb_with_tb_lookup, val);
+}
+#endif
+
 /**
  * tcg_gen_goto_tb() - output goto_tb TCG operation
  * @idx: Direct jump slot index (0 or 1)
diff --git a/tcg/tcg-opc.h b/tcg/tcg-opc.h
index 6d0410c..c8290db 100644
--- a/tcg/tcg-opc.h
+++ b/tcg/tcg-opc.h
@@ -180,6 +180,9 @@ DEF(mulsh_i64, 1, 2, 0, IMPL(TCG_TARGET_HAS_mulsh_i64))
 DEF(insn_start, 0, 0, TLADDR_ARGS * TARGET_INSN_START_WORDS,
     TCG_OPF_NOT_PRESENT)
 DEF(exit_tb, 0, 0, 1, TCG_OPF_BB_END)
+#ifdef CONFIG_TB_LOOKUP_OPT
+DEF(exit_tb_with_tb_lookup, 0, 0, 1, TCG_OPF_BB_END )
+#endif
 DEF(goto_tb, 0, 0, 1, TCG_OPF_BB_END)
 
 DEF(qemu_ld_i32, 1, TLADDR_ARGS, 1,
diff --git a/tcg/tcg.h b/tcg/tcg.h
index 1bcabca..b94b366 100644
--- a/tcg/tcg.h
+++ b/tcg/tcg.h
@@ -697,6 +697,9 @@ struct TCGContext {
 
     uint16_t gen_insn_end_off[TCG_MAX_INSNS];
     target_ulong gen_insn_data[TCG_MAX_INSNS][TARGET_INSN_START_WORDS];
+#ifdef CONFIG_TB_LOOKUP_OPT
+    void *tb_lookup_cache;
+#endif
 };
 
 extern TCGContext tcg_ctx;
@@ -1068,11 +1071,27 @@ static inline unsigned get_mmuidx(TCGMemOpIdx oi)
  * to this default (which just calls the prologue.code emitted by
  * tcg_target_qemu_prologue()).
  */
+
+#ifdef _LP64
+#define TB_EXIT_MASK 7
+#define TB_EXIT_IDX0 0
+#define TB_EXIT_IDX1 1
+#define TB_EXIT_ICOUNT_EXPIRED 2
+#define TB_EXIT_REQUESTED 3
+
+#ifdef CONFIG_TB_LOOKUP_OPT
+  #define TB_EXIT_TB_LOOPKUP_OPT 4
+#endif
+#else
 #define TB_EXIT_MASK 3
 #define TB_EXIT_IDX0 0
 #define TB_EXIT_IDX1 1
 #define TB_EXIT_ICOUNT_EXPIRED 2
 #define TB_EXIT_REQUESTED 3
+#ifdef CONFIG_TB_LOOKUP_OPT
+#error "not support CONFIG_TB_LOOKUP_OPT in mips32"
+#endif
+#endif
 
 #ifdef HAVE_TCG_QEMU_TB_EXEC
 uintptr_t tcg_qemu_tb_exec(CPUArchState *env, uint8_t *tb_ptr);
diff --git a/translate-all.c b/translate-all.c
index 0dd6466..c41a25a 100644
--- a/translate-all.c
+++ b/translate-all.c
@@ -848,6 +848,9 @@ void tb_flush(CPUState *cpu)
         > tcg_ctx.code_gen_buffer_size) {
         cpu_abort(cpu, "Internal error: code buffer overflow\n");
     }
+#ifdef CONFIG_TB_LOOKUP_OPT
+    memset(tcg_ctx.tb_ctx.tbs, 0, tcg_ctx.tb_ctx.nb_tbs * sizeof(TranslationBlock));
+#endif
     tcg_ctx.tb_ctx.nb_tbs = 0;
 
     CPU_FOREACH(cpu) {
@@ -1023,6 +1026,9 @@ void tb_phys_invalidate(TranslationBlock *tb, tb_page_addr_t page_addr)
     tb_jmp_unlink(tb);
 
     tcg_ctx.tb_ctx.tb_phys_invalidate_count++;
+#ifdef CONFIG_TB_LOOKUP_OPT
+    tb->pc = (target_ulong)0;
+#endif
 }
 
 #ifdef CONFIG_SOFTMMU
@@ -1177,6 +1183,10 @@ TranslationBlock *tb_gen_code(CPUState *cpu,
     tb->flags = flags;
     tb->cflags = cflags;
 
+#ifdef CONFIG_TB_LOOKUP_OPT
+    memset(tb->tb_lookup_cache, 0, TB_LOOKUP_CACHE_SIZE * sizeof(unsigned long));
+#endif
+
 #ifdef CONFIG_PROFILER
     tcg_ctx.tb_count1++; /* includes aborted translations because of
                        exceptions */
@@ -1185,6 +1195,10 @@ TranslationBlock *tb_gen_code(CPUState *cpu,
 
     tcg_func_start(&tcg_ctx);
 
+#ifdef CONFIG_TB_LOOKUP_OPT
+    tcg_ctx.tb_lookup_cache = tb->tb_lookup_cache;
+#endif
+
     tcg_ctx.cpu = ENV_GET_CPU(env);
     gen_intermediate_code(env, tb);
     tcg_ctx.cpu = NULL;
-- 
1.7.1
